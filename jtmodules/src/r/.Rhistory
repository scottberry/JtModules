library(jtapi)
?gethandles
?readinputargs
install.packages("yaml")
install.packages("rhdf5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(jtapi)
library(jtapi)
library(jtapi)
required_keys <- ["name", "value", "class"]
required_keys <- array("name", "value", "class")
required_keys <- vector("name", "value", "class")
required_keys <- c("name", "value", "class")
?not
?~
KLjsdfg
!('1' == string(1))
!('1' == str(1))
dim(c(2,3,4))
dim(matrix(c(2,3,4)))
if (dim(c(2,3,4)) != NULL) {print('Yes')}
if (!(dim(c(3,4)))) {}
is.atomic(dim(c(2,3,4)))
is.NULL(dim(c(2,3,4)))
is.null(dim(c(2,3,4)))
is.null(dim(matrix(c(2,3,4))))
!is.null(dim(matrix(c(2,3,4))))
import yaml
library(yaml)
handles = yaml::yaml.load_file('/Users/mdh/jterator/tests/handles/myRModule.handles')
handles$output
lapply(handles$output, function(x$name))
lapply(handles$output, function(x))
lapply(handles$output)
lapply(handles$output, keys
)
lapply(handles$output, names)
lapply(handles$output, function(names(x) == "name")
lapply(handles$output, function(names(x) == "name"))
lapply(handles$output, function(x) names(x) == "name"))
lapply(handles$output, function(x) names(x) == "name")
lapply(handles$output, function(x) x$name)
lapply(handles$output, function(x) x$name == "OutputVar")
apply(handles$output, function(x) x$name == "OutputVar")
sapply(handles$output, function(x) x$name == "OutputVar")
sapply(handles$input, function(x) x$name == "InputVar1")
which(sapply(handles$input, function(x) x$name == "InputVar1"))
str(1)
string(1)
char(1)
read.csv('~/proteinatlas/cancer.csv', header=True)
cancer = read.csv('~/proteinatlas/cancer.csv', header=TRUE)
cancer.columns
View(cancer)
cancer = read.csv('~/proteinatlas/normal_tissue.csv', header=TRUE)
cancer = read.csv('~/proteinatlas/cancer.csv', header=TRUE)
normal = read.csv('~/proteinatlas/normal_tissue.csv', header=TRUE)
normal$Level
list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)
list(name="Fred", mynumbers=1, mymatrix=3, age=5.3)
list(Not detected=0)
list('Not detected'=0)
level_map = list('Not detected'=0, 'Low'=1, 'Medium'=2, 'High'=3)
level_map
keys(level_map)
normal$Level[normal$Level==names(level_map)[1]]
normal[normal$Level==names(level_map)[1]]
normal[normal$Level==names(level_map)[1]]
normal$Level[normal$Level==names(level_map)[1]]
length(level_map)
for (i in length(level_map)) {
name = names(level_map)[i]
normal$Level[normal$Level==name] = level_map[[name]]
}
level_map[[name]]
View(normal)
normal = read.csv('~/proteinatlas/normal_tissue.csv', header=TRUE)
names(level_map)[i]
normal$Level==name
level_map[[name]]
normal$Level[normal$Level==name] = level_map[[name]]
levels(normal$Level)
as.numeric(levels(normal$Level))
as.character(levels(normal$Level))
normal$LevelQuantitative[normal$Level==name] = level_map[[name]]
View(normal)
name
normal = read.csv('~/proteinatlas/normal_tissue.csv', header=TRUE)
level_map = list('Not detected'=0, 'Low'=1, 'Medium'=2, 'High'=3)
for (i in length(level_map)) {
name = names(level_map)[i]
normal$LevelQuantitative[normal$Level==name] = level_map[[name]]
}
View(normal)
for (i in 4) { print i}
for (i in 4) { cat i }
for (i in 4) { i }
for (i in 4) { cat(i) }
for (i in 1:4) { cat(i) }
for (i in 1:length(level_map)) {
name = names(level_map)[i]
normal$LevelQuantitative[normal$Level==name] = level_map[[name]]
}
View(normal)
normal$Level == "High"
View(normal)
normal$Expression.type
normal$Expression.type != APE
normal$Expression.type != "APE"
normal$Level=='High' && normal$Reliability$Supportive
normal$Level=='High' && normal$Reliability=='Supportive'
normal$Reliability=='Supportive'
(normal$Level=='High') && (normal$Reliability=='Supportive')
normal$Level=='High' & normal$Reliability=='Supportive'
normal$Gene[normal$Level=='High' & normal$Reliability=='Supportive']
normal_selection = normal$Gene[normal$Level=='High' & normal$Reliability=='Supportive']
View(cancer)
(cancer$Count.patients / cancer$Total.patiens)== 1
cancer$Count.patients
cancer$Total.patiens
cancer$Count.patients / cancer$Total.patients
cancer_selection = cancer$Gene[cancer$Level=='High' & (cancer$Count.patients / cancer$Total.patients)== 1]
cancer_selection = cancer[cancer$Level=='High' & (cancer$Count.patients / cancer$Total.patients)== 1]
cancer_selection = cancer[cancer$Level=='High' & (cancer$Count.patients / cancer$Total.patients)== 1, ]
normal_selection = normal[normal$Level=='High' & normal$Reliability=='Supportive', ]
View(cancer_selection)
cancer_selection$Tumor
grepl('prostate', cancer_selection$Tumor)
cancer_selection[grepl('prostate', cancer_selection$Tumor), ]
cancer_prostate_selection = cancer_selection[grepl('prostate', cancer_selection$Tumor), ]
View(normal_selection)
normal_prostate_selection = normal_selection[grepl('prostate', normal_selection$Tissue), ]
View(normal_prostate_selection)
unique(cancer_prostate_selection$Gene, normal_prostate_selection$Gene)
prostate_selection = unique(cancer_prostate_selection$Gene, normal_prostate_selection$Gene)
prostate_selection = apply(unique(cancer_prostate_selection$Gene, normal_prostate_selection$Gene), as.numeric)
prostate_selection = as.character(unique(cancer_prostate_selection$Gene, normal_prostate_selection$Gene))
subcell = read.csv('~/proteinatlas/subcellular_location.csv', header=TRUE)
View(subcell)
prostate_selection_genes = as.character(unique(cancer_prostate_selection$Gene, normal_prostate_selection$Gene))
View(subcell)
intersect(subcell$Gene, prostate_selection_genes)
membrane_selection_genes = subcell$Gene[subcell$Main.location=='Plasma membrane']
intersect(membrane_selection_genes, prostate_selection_genes)
final_selection = intersect(membrane_selection_genes, prostate_selection_genes)
subcell$Main.location
grepl('Plasma membrane', subcell$Main.location)
grepl('Plasma membrane', subcell$Main.location)
membrane_selection_genes = subcell$Gene[grepl('Plasma membrane', subcell$Main.location)]
final_selection = intersect(membrane_selection_genes, prostate_selection_genes)
final_selection
install.packages('spatstat')
lm([130348, 140875] ~ [130348/200, 140875/200])
y = [130348, 140875]
y = vector(130348, 140875)
y = as.vector(130348, 140875)
y = as.vector([130348, 140875])
lm(c(130348, 140875) ~ c(130348/200, 140875/200))
lm(c(130348, 140875) ~ 0 + c(130348/200, 140875/200))
130348/200
140875/200
mod = lm(c(130348, 140875) ~ 0 + c(130348/200, 140875/200))
mod$residuals
200 * -2,136
200 * -2.136
200 - 2.136
library(spatstat)
?install.package
?install.packages
library(devtools)
library(roxygen2)
setwd('/Users/mdh/jtmodules/src/r')
create('jtmodules')
